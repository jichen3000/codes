library(C50)
data(churn)
str(churnTrain)
churnTrain = churnTrain[,! names(churnTrain) %in% c("state",
    "area_code", "account_length") ]
set.seed(2)
ind = sample(2, nrow(churnTrain), replace = TRUE, prob=c(0.7, 0.3))
trainset = churnTrain[ind == 1,]
testset = churnTrain[ind == 2,]
dim(trainset)
dim(testset)
library(adabag)
set.seed(2)
churn.bagging = bagging(churn ~ ., data=trainset, mfinal=10)
churn.bagging$importance
churn.predbagging= predict.bagging(churn.bagging, newdata=testset)
churn.predbagging$confusion
churn.predbagging$error
set.seed(2)
churn.boost = boosting(churn ~.,data=trainset,mfinal=10,
    coeflearn="Freund", boos=FALSE , control=rpart.control(maxdepth=3))
churn.boost.pred = predict.boosting(churn.boost,newdata=testset)
churn.boost.pred$confusion
churn.boost.pred$error
boosting.evol.train = errorevol(churn.boost, trainset)
boosting.evol.test = errorevol(churn.boost, testset)
plot(boosting.evol.test$error, type = "l", ylim = c(0, 1),
    main = "Boosting error versus number of trees", xlab ="Iterations",
    ylab = "Error", col = "red", lwd = 2)
lines(boosting.evol.train$error, cex = .5, col = "blue", lty = 2, lwd= 2)
legend("topright", c("test", "train"), col = c("red", "blue"), lty =1:2, lwd = 2)
bagging.evol.train = errorevol(churn.bagging, trainset)
bagging.evol.test = errorevol(churn.bagging, testset)
plot(bagging.evol.test$error, type = "l", ylim = c(0, 1),
    main = "Bagging error versus number of trees", xlab ="Iterations",
    ylab = "Error", col = "red", lwd = 2)
lines(bagging.evol.train$error, cex = .5, col = "blue", lty = 2, lwd= 2)
legend("topright", c("test", "train"), col = c("red", "blue"), lty =1:2, lwd = 2)
install.packages("randomForest")
library(randomForest)
churn.rf = randomForest(churn ~ ., data = trainset, importance = T)
churn.rf
churn.prediction = predict(churn.rf, testset)
table(churn.prediction, testset$churn) 
importance(churn.rf)
varImpPlot(churn.rf)
install.packages("party")
library(party)
churn.cforest = cforest(churn ~ ., data = trainset,
    controls=cforest_unbiased(ntree=1000, mtry=5))
churn.cforest
churn.cforest.prediction = predict(churn.cforest, testset, OOB=TRUE,
    type = "response")
table(churn.cforest.prediction, testset$churn)
churn.bagging= errorest(churn ~ ., data = trainset, model = bagging)
churn.bagging
churn.bagging= errorest(churn ~ ., data = trainset, model = bagging)
library(ipred)
churn.bagging= errorest(churn ~ ., data = trainset, model = bagging)
churn.bagging
install.packages("ada")
library(ada)
churn.boosting= errorest(churn ~ ., data = trainset, model = ada)
churn.boosting
churn.rf= errorest(churn ~ ., data = trainset, model = randomForest)
churn.rf
churn.predict = function(object, newdata) {predict(object, newdata =
    newdata, type = "class")}
churn.tree= errorest(churn ~ ., data = trainset, model =
    rpart,predict = churn.predict)
churn.tree 
customer= read.csv('customer.csv', header=TRUE)
head(customer)
str(customer)
customer = scale(customer[,-1])
str(customer)
head(customer)
hc = hclust(dist(customer, method="euclidean"), method="ward.D2")
hc
plot(hc, hang = -0.01, cex = 0.7)
hc2 = hclust(dist(customer), method="single")
plot(hc2, hang = -0.01, cex = 0.7)
customer.raw= read.csv('customer.csv', header=TRUE)
head(customer.raw)
str(customer.raw)
library(magrittr)
fit = cutree(hc, k = 4)
fit
table(fit)
plot(hc)
rect.hclust(hc, k = 4 , border="red")
set.seed(22)
fit = kmeans(customer, 4)
fit
barplot(t(fit$centers), beside = TRUE,xlab="cluster", ylab="value")
install.packages("cluster")
library(cluster)
clusplot(customer, fit$cluster, color=TRUE, shade=TRUE)
exit
q()
install.packages("fpc")
library(fpc)
single_c =  hclust(dist(customer), method="single")
hc_single = cutree(single_c, k = 4)
complete_c =  hclust(dist(customer), method="complete")
hc_complete =  cutree(complete_c, k = 4)
set.seed(22)
km = kmeans(customer, 4)
cs = cluster.stats(dist(customer), km$cluster)
cs[c("within.cluster.ss","avg.silwidth")]
sapply(list(kmeans = km$cluster, hc_single = hc_single, hc_complete =
    hc_complete), function(c) cluster.stats(dist(customer), c)
    [c("within.cluster.ss","avg.silwidth")])
set.seed(22)
km = kmeans(customer, 4)
kms = silhouette(km$cluster,dist(customer))
summary(kms)
library(cluster)
kms = silhouette(km$cluster,dist(customer))
summary(kms)
nk = 2:10
set.seed(22)
WSS = sapply(nk, function(k) {
        kmeans(customer, centers=k)$tot.withinss
    })
WSS
SW = sapply(nk, function(k) {
        cluster.stats(dist(customer), kmeans(customer,
        centers=k)$cluster)$avg.silwidth
    })
SW
# plot(nk, SW, type="l", xlab="number of clusers", ylab="average
#    silhouette width")
nk[which.max(SW)]
install.packages("mlbench")
library(mlbench)
install.packages("fpc")
library(fpc)
set.seed(2)
p = mlbench.cassini(500)
plot(p$x)
p
summary(p)
ds = dbscan(dist(p$x),0.2, 2, countmode=NULL, method="dist")
ds
plot(ds, p$x)
y = matrix(0,nrow=3,ncol=2)
y[1,] = c(0,0)
y[2,] = c(0,-1.5)
y[3,] = c(1,1)
y
predict(ds, p$x, y)
install.packages("mclust")
library(mclust)
mb = Mclust(customer)
plot(mb)
customer.raw= read.csv('customer.csv', header=TRUE)
head(customer.raw)
str(customer.raw)
#### normalizethecustomer
customer = scale(customer.raw[,-1])
mb = Mclust(customer)
mb = Mclust(customer.raw)
plot(mb)
mb = Mclust(customer)
head(customer.raw)
str(customer.raw)
sum(customer.raw$Sex)
head(customer)
str(customer)
svd(customer)
mb = Mclust(customer)
install.packages("seriation")
library(seriation)
dissplot(dist(customer), labels=km$cluster, options=list(main="Kmeans
    Clustering With k=4"))
complete_c =  hclust(dist(customer), method="complete")
hc_complete =  cutree(complete_c, k = 4)
dissplot(dist(customer), labels=hc_complete,
    options=list(main="Hierarchical Clustering"))
install.packages("png")
library(png)
img2 = readPNG("handwriting.png", TRUE)
img3 = img2[,nrow(img2):1]
b = cbind(as.integer(which(img3 < -1) %% 28), which(img3 < -1) / 28)
plot(b, xlim=c(1, 28), ylim=c(1,28))
set.seed(18)
fit = kmeans(b, 2)
plot(b, col=fit$cluster)
plot(b, col=fit$cluster,  xlim=c(1,28), ylim=c(1,28))
ds = dbscan(b, 2)
ds
plot(ds, b,  xlim=c(1,28), ylim=c(1,28))
q()
data(swiss)
swiss = swiss[,-1]
swiss.pca = prcomp(swiss,
    center = TRUE,
    scale  = TRUE)
swiss.pca
head(swiss)
summary(swiss.pca)
screeplot(swiss.pca, type="barplot")
swiss.pca$sdev ^ 2
swiss.dist =dist(swiss)
swiss.dist
head(swiss.dist
)
swiss.recon = swiss.svd$u[,1] %*% diag(swiss.svd$d[1], length(1),
   length(1)) %*% t(swiss.svd$v[,1])
swiss.svd = svd(swiss) 
swiss.recon = swiss.svd$u[,1] %*% diag(swiss.svd$d[1], length(1),
   length(1)) %*% t(swiss.svd$v[,1])
svd.m = svd(scale(swiss))
svd.m$v
pca.m = prcomp(swiss,scale=TRUE)
pca.m$rotation
q()
