x <- runif(20)
x
savehistory()
.libPaths()
library()
search("pryr")
search
search()
install.packages()
install.packages('pryr')
installed.packages()
q()
library(pryr)
help(package=“pryr”)
help(package="pryr")
install.packages('minitest')
example(Startup)
q()
chooseCRANmirror(89)
install.packages('minitest')
chooseCRANmirror
chooseCRANmirror(ind=89)
q()
install.packages('minitest')
q()
install.packages('minitest')
install.packages("vcd")
library(vcd)
help(Arthritis)
example(Arthritis)
q()
library(ggm)
install.packages(ggm)
install.packages("ggm")
states
states.x77
state.x77
states<- state.x77[,1:6]
pcor(c(1,5,2,3,6), cov(states))
library(ggm)
pcor(c(1,5,2,3,6), cov(states))
install.packages("MASS")
library(MASS)
UScrime
t.test(Prob ! So, data=UScrime)
t.test(Prob  So, data=UScrime)
t.test(Prob ~ So, data=UScrime)
help(UScrime)
help(UScrime)
with(UScrime, by(Prob, So, median))
wilcox.test(Prob ~ So, data=UScrime)
class <- state.region
var <- state.x77[,c("Illiteracy")]
class
var
mydata <- as.data.frame(cbind(class, var))
mydata
state
state.region
rm(class,var)
class
var
mydata
install.packages("npmc")
library(npmc)
?lm
fit <- lm(weight ~ height, data=women)
fit
women
typeof(fit)
mode(fit)
storage.mode(fit)
class(fit)
summary(fit)
size(women)
length(women)
dim(women)
fit(72)
fit
?fitted
fitted
fitted(fit)
plot(women$height,women$weight,
    xlab="Height (in inches)",
    ylab="Weight (in pounds)")
abline(fit)
fit2 <- lm(weight ~ height + I(height^2), data=women)
fit2
summary(fit2)
abline(fit2)
lines(women$height,fitted(fit2))
lines(women$height,fitted(fit2), color=blue)
lines(women$height,fitted(fit2), color=BLUE)
lines(women$height,fitted(fit2), color=1)
lines(women$height,fitted(fit2), col=1)
lines(women$height,fitted(fit2), col=2)
exit
exit()
quit()
install.packages(car)
install.packages("car")
library(car)
scatterplot(weight ~ height,
   data=women,
  spread=FALSE, lty.smooth=2,
   pch=19,
  main="Women Age 30-39",
  xlab="Height (inches)",
  ylab="Weight (lbs.)")
states <- as.data.frame(state.x77[,c("Murder", "Population",
         "Illiteracy", "Income", "Frost")])
scatterplotMatrix(states, spread=FALSE, lty.smooth=2,
    main="Scatter Plot Matrix")
fit <- lm(Murder ~ Population + Illiteracy + Income + Frost,
            data=states)
summary(fit)
fit <- lm(mpg ~ hp + wt + hp:wt, data=mtcars)
summary(fit)
fit <- lm(Murder ~ Population + Illiteracy + Income + Frost, data=states)
confint(fit)
?confint
fit <- lm(weight ~ height, data=women)
        par(mfrow=c(2,2))
        plot(fit)
women
summary(fit)
exit
quit()
library(car)
fit <- lm(Murder ~ Population + Illiteracy + Income + Frost, data=states)
qqPlot(fit, labels=row.names(states), id.method="identify",
  simulate=TRUE, main="Q-Q Plot")
states["Nevada",]
fitted(fit)["Nevada"]
residuals(fit)["Nevada"]
z <- rstudent(fit)
z
exit
quit()
Affairs
library(AER)
data(Affairs, package="AER")
Affairs$ynaffair[Affairs$affairs  > 0] <- 1
Affairs$ynaffair[Affairs$affairs == 0] <- 0
Affairs$ynaffair <- factor(Affairs$ynaffair,
                             levels=c(0,1),
                             labels=c("No","Yes"))
table(Affairs$ynaffair)
fit.reduced <- glm(ynaffair ~ age + yearsmarried + religiousness +
                     rating, data=Affairs, family=binomial())
summary(fit.reduced)
anova(fit.reduced, fit.full, test="Chisq")
testdata <- data.frame(rating=c(1, 2, 3, 4, 5), age=mean(Affairs$age),
                                 yearsmarried=mean(Affairs$yearsmarried),
                       religiousness=mean(Affairs$religiousness))
testdata
testdata$prob <- predict(fit.reduced, newdata=testdata, type="response")
testdata
library(robust)
install.packages("robust")
library(robust)
breslow.dat
 data(breslow.dat, package="robust")
summary( breslow.dat)
?breslow.dat
opar <- par(no.readonly=TRUE)
par(mfrow=c(1,2))
attach(breslow.dat)hist(sumY, breaks=20, xlab=”Seizure Count”,
     main=”Distribution of Seizures”)
attach(breslow.dat)
hist(sumY, breaks=20, xlab=”Seizure Count”,
     main=”Distribution of Seizures”)
hist(sumY, breaks=20, xlab=”Seizure Count”,
     main=”Distribution of Seizures”)
hist(sumY, breaks=20, xlab=”Seizure Count”,
hist(sumY, breaks=20, xlab="Seizure Count",
main="Distribution of Seizures")
boxplot(sumY ~ Trt, xlab="Treatment", main="Group Comparisons")
par(opar)
fit <- glm(sumY ~ Base + Age + Trt, data=breslow.dat, family=poisson())
summary(fit)
coef(fit)
exp(coef(fit))
fit.od <- glm(sumY ~ Base, data=breslow.dat,
                family=quasipoisson())
summary(fit.od)
install.packages("psych")
library(psych)
USJudgeRatings
fa.parallel(USJudgeRatings[,-1], fa="PC", ntrials=100,
                    show.legend=FALSE, main="Scree plot with parallel analysis")
fa.parallel(USJudgeRatings[,-1], fa="PC", ntrials=100,
show.legend=FALSE, main="Scree plot with parallel analysis")
fa.parallel(USJudgeRatings[,-1], fa="PC",
show.legend=FALSE, main="Scree plot with parallel analysis")
pc <- principal(USJudgeRatings[,-1], nfactors=1)
pc
USJudgeRatings[, -1]
exit
quit
quit()
library(psych)
pc <- principal(USJudgeRatings[,-1], nfactors=1)
pc
pc <- principal(USJudgeRatings[,-1], nfactors=2)
pc
fa.parallel(Harman23.cor$cov, n.obs=302, fa="pc", ntrials=100,
            show.legend=FALSE, main="Scree plot with parallel analysis")
fa.parallel(Harman23.cor$cov, n.obs=302, fa="pc", 
            show.legend=FALSE, main="Scree plot with parallel analysis")
PC <- principal(Harman23.cor$cov, nfactors=2, rotate="none")
PC
rc <- principal(Harman23.cor$cov, nfactors=2, rotate="varimax")
rc
pc <- principal(USJudgeRatings[,-1], nfactors=1, score=TRUE)
pc
head(pc$scores)
exit
quit()
ability.cov
ability
correlations <- cov2cor(ability.cov$cov)
correlations
fa.parallel(correlations, n.obs=112, fa="both",main="Scree plots with parallel analysis")
library(psych)
fa.parallel(correlations, n.obs=112, fa="both",main="Scree plots with parallel analysis")
fa <- fa(correlations, nfactors=2, rotate="none", fm="pa")
fa
fa.varimax <- fa(correlations, nfactors=2, rotate="varimax", fm="pa")
fa.promax <- fa(correlations, nfactors=2, rotate="promax", fm="pa")
fa.promax <- fa(correlations, nfactors=2, rotate="promax", fm="pa")
fa.promax
exit
quit()
install.packages(c("VIM", "mice"))
library(VIM)
sleep
data(sleep, package="VIM")
sleep
sleep[complete.cases(sleep),]
sleep[!complete.cases(sleep),]
?sleep
quit()
x <- as.data.frame(abs(is.na(sleep)))
x
head(sleep,n=5)
head?
?head
y <- x[which(sd(x) > 0)]
sd(x)
?sd
?sd
as.vector(x, "numeric")
x
as.numeric(x)
x
x <- as.data.frame(abs(is.na(sleep)))
x
head(x, n=5)
y <- x[which(sd(x) > 0)]
is.data.frame(x)
as.numeric(unlist(a))
as.numeric(unlist(x))
x1 <- lapply(x, as.numeric)
y <- x1[which(sd(x1) > 0)]
sd(x1)
x <- as.vector(abs(is.na(sleep)))
x
x <- as.data.frame(abs(is.na(sleep)))
x
abs(is.na(sleep))
x <- abs(is.na(sleep))
sd(x)
y <- x[which(sd(x) > 0)]
y
cor(y)
x <- as.matrix(abs(is.na(sleep))
)
x
y <- x[which(sd(x) > 0)]
y
sd(x)
x <- as.data.frame(abs(is.na(sleep)))
x
?sd
sd(x)
x[1,]
x[,1]
sleep
options(digits=1)
cor(na.omit(sleep))
exit
library(mice)
data(sleep, package="VIM"
)
imp <- mice(sleep, seed=1234)
fit <- with(imp, lm(Dream ~ Span + Gest))
pooled <- pool(fit)
summary(pooled)
imp
quit
quit()
library(lattice)
histogram(~height | voice.part, data = singer,
            main="Distribution of Heights by Voice Pitch",
            xlab="Height (inches)")
singer
histogram(height, data = singer,
            main="Distribution of Heights by Voice Pitch",
            xlab="Height (inches)")
histogram(~height, data = singer,
            main="Distribution of Heights by Voice Pitch",
            xlab="Height (inches)")
?histogram
mygraph <- densityplot(~height|voice.part, data=singer)
plot(mygraph)
update(mygraph, col=”red”, pch=16, cex=.8, jitter=.05, lwd=2)
update(mygraph, col="red", pch=16, cex=.8, jitter=.05, lwd=2)
mtcars
?mtcar
?mtcars
exit
quit
quit()
library(e1071)
getwd()
data()
quit()
?hist
quit90
quit()
