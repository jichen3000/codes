<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>fileTypes</key>
	<array>
		<string>agen</string>
		<string>inc</string>
		<string>ageninc</string>
	</array>
	<key>name</key>
	<string>Agen</string>
	<key>patterns</key>
	<array>
		<dict>
			<key>include</key>
			<string>#comments</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\b([1-9]+[0-9]*|0)</string>
			<key>name</key>
			<string>constant.numeric.integer.decimal.agen</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>keywords that delimit flow blocks or alter flow from within a block</string>
			<key>match</key>
			<string>\b(else|if|break|continue|return|end|errend|ifphrase|switch|start|finish|case|default|goto|numeric|char)\b</string>
			<key>name</key>
			<string>keyword.control.flow.agen</string>
		</dict>
		<dict>
			<key>match</key>
			<string>&lt;\=|&gt;\=|\=\=|&lt;|&gt;|\!\=</string>
			<key>name</key>
			<string>keyword.operator.comparison.agen</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\+\=|-\=|\*\=|/\=|//\=|%\=|&amp;\=|\|\=|\^\=|&gt;&gt;\=|&lt;&lt;\=|\*\*\=</string>
			<key>name</key>
			<string>keyword.operator.assignment.augmented.agen</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\+|\-|\*|\*\*|/|//|%|&lt;&lt;|&gt;&gt;|&amp;|\||\^|~</string>
			<key>name</key>
			<string>keyword.operator.arithmetic.agen</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\=</string>
			<key>name</key>
			<string>keyword.operator.assignment.agen</string>
		</dict>
		<dict>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.other.agen</string>
				</dict>
			</dict>
			<key>comment</key>
			<string>keywords that haven't fit into other groups (yet).</string>
			<key>match</key>
			<string>\b(normal|caps|small|hidden|decimal|hex|float)\b</string>
		</dict>
		<dict>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>variable.parameter.function.agen</string>
				</dict>
			</dict>
			<key>comment</key>
			<string>the functions built in.</string>
			<key>match</key>
			<string>\b(include|setnumber|calc|define|type|call|asknumber)\b</string>
		</dict>
		<dict>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>variable.parameter.function.agen</string>
				</dict>
			</dict>
			<key>comment</key>
			<string>the functions built in for string.</string>
			<key>match</key>
			<string>\b(setstring|sscanf|askstring|stringcheck|check|set|verify|replace)\b</string>
		</dict>
		<dict>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>variable.parameter.function.agen</string>
				</dict>
			</dict>
			<key>comment</key>
			<string>the functions built in for list.</string>
			<key>match</key>
			<string>\b(setlist|listorder|liststringfind|loclist|set|combo)\b</string>
		</dict>
		<dict>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>variable.parameter.function.agen</string>
				</dict>
			</dict>
			<key>comment</key>
			<string>the functions built in for kb.</string>
			<key>match</key>
			<string>\b(kbopen|kbread|kbclose|rdwrt|rdonly|kbsetkey|kbspecial|write|kbmayinsert|kbinsert|kbupdate|kbdelete)\b</string>
		</dict>
		<dict>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>variable.parameter.function.agen</string>
				</dict>
			</dict>
			<key>comment</key>
			<string>the functions built in for odbc.</string>
			<key>match</key>
			<string>\b(odbc|login|exec|init|select|next)\b</string>
		</dict>
		<dict>
			<key>begin</key>
			<string>"</string>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.begin.agen</string>
				</dict>
			</dict>
			<key>end</key>
			<string>"</string>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.end.agen</string>
				</dict>
			</dict>
			<key>name</key>
			<string>string.quoted.double.agen</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#string_escaped_char</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#string_placeholder</string>
				</dict>
			</array>
		</dict>
		<dict>
			<key>match</key>
			<string>^([A-Za-z_][A-Za-z0-9_]*)\:\s*\n</string>
			<key>name</key>
			<string>entity.name.function.agen</string>
		</dict>
	</array>
	<key>repository</key>
	<dict>
		<key>comments</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>meta.toc-list.banner.block.agen</string>
						</dict>
					</dict>
					<key>match</key>
					<string>^/\* =(\s*.*?)\s*= \*/$\n?</string>
					<key>name</key>
					<string>comment.block.agen</string>
				</dict>
				<dict>
					<key>begin</key>
					<string>/\*</string>
					<key>captures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.comment.agen</string>
						</dict>
					</dict>
					<key>end</key>
					<string>\*/</string>
					<key>name</key>
					<string>comment.block.agen</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\*/.*\n</string>
					<key>name</key>
					<string>invalid.illegal.stray-comment-end.agen</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>meta.toc-list.banner.line.agen</string>
						</dict>
					</dict>
					<key>match</key>
					<string>^// =(\s*.*?)\s*=\s*$\n?</string>
					<key>name</key>
					<string>comment.line.banner.agen</string>
				</dict>
				<dict>
					<key>begin</key>
					<string>//</string>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.comment.agen</string>
						</dict>
					</dict>
					<key>end</key>
					<string>$\n?</string>
					<key>name</key>
					<string>comment.line.double-slash.agen</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>match</key>
							<string>(?&gt;\\\s*\n)</string>
							<key>name</key>
							<string>punctuation.separator.continuation.agen</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>entity_name_function</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#illegal_names</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#generic_names</string>
				</dict>
			</array>
		</dict>
		<key>generic_names</key>
		<dict>
			<key>match</key>
			<string>[A-Za-z_][A-Za-z0-9_]*</string>
		</dict>
		<key>illegal_names</key>
		<dict>
			<key>match</key>
			<string>\b(and|as|assert|break|class|continue|def|del|elif|else|except|exec|finally|for|from|global|if|import|in|is|lambda|not|or|pass|print|raise|return|try|while|with|yield)\b</string>
			<key>name</key>
			<string>invalid.illegal.name.agen</string>
		</dict>
		<key>string_escaped_char</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>\\(\\|[abefnprtv'"?]|[0-3]\d{,2}|[4-7]\d?|x[a-fA-F0-9]{,2}|u[a-fA-F0-9]{,4}|U[a-fA-F0-9]{,8})</string>
					<key>name</key>
					<string>constant.character.escape.agen</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\\.</string>
					<key>name</key>
					<string>invalid.illegal.unknown-escape.agen</string>
				</dict>
			</array>
		</dict>
		<key>string_placeholder</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>(?x)%
    						(\d+\$)?                             # field (argument #)
    						[#0\- +']*                           # flags
    						[,;:_]?                              # separator character (AltiVec)
    						((-?\d+)|\*(-?\d+\$)?)?              # minimum field width
    						(\.((-?\d+)|\*(-?\d+\$)?)?)?         # precision
    						(hh|h|ll|l|j|t|z|q|L|vh|vl|v|hv|hl)? # length modifier
    						[diouxXDOUeEfFgGaACcSspn%]           # conversion type
    					</string>
					<key>name</key>
					<string>constant.other.placeholder.agen</string>
				</dict>
				<dict>
					<key>match</key>
					<string>%</string>
					<key>name</key>
					<string>invalid.illegal.placeholder.agen</string>
				</dict>
			</array>
		</dict>
	</dict>
	<key>scopeName</key>
	<string>source.agen</string>
	<key>uuid</key>
	<string>ca03e751-04ef-4330-9a6b-9b99aae1c418</string>
</dict>
</plist>
