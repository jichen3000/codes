{
    "name": "Ruby", 
    "patterns": [
        {
            "captures": {
                "7": {
                    "name": "punctuation.definition.variable.ruby"
                }, 
                "6": {
                    "name": "variable.other.object.ruby"
                }, 
                "5": {
                    "name": "punctuation.separator.inheritance.ruby"
                }, 
                "4": {
                    "name": "entity.other.inherited-class.ruby"
                }, 
                "2": {
                    "name": "entity.name.type.class.ruby"
                }, 
                "1": {
                    "name": "keyword.control.class.ruby"
                }
            }, 
            "match": "^\\s*(class)\\s+(([.a-zA-Z0-9_:]+(\\s*(<)\\s*[.a-zA-Z0-9_:]+)?)|((<<)\\s*[.a-zA-Z0-9_:]+))", 
            "name": "meta.class.ruby"
        }, 
        {
            "captures": {
                "7": {
                    "name": "entity.other.inherited-class.module.third.ruby"
                }, 
                "6": {
                    "name": "punctuation.separator.inheritance.ruby"
                }, 
                "5": {
                    "name": "entity.other.inherited-class.module.second.ruby"
                }, 
                "4": {
                    "name": "punctuation.separator.inheritance.ruby"
                }, 
                "3": {
                    "name": "entity.other.inherited-class.module.first.ruby"
                }, 
                "2": {
                    "name": "entity.name.type.module.ruby"
                }, 
                "1": {
                    "name": "keyword.control.module.ruby"
                }, 
                "8": {
                    "name": "punctuation.separator.inheritance.ruby"
                }
            }, 
            "match": "^\\s*(module)\\s+(([A-Z]\\w*(::))?([A-Z]\\w*(::))?([A-Z]\\w*(::))*[A-Z]\\w*)", 
            "name": "meta.module.ruby"
        }, 
        {
            "match": "(?<!\\.)\\belse(\\s)+if\\b", 
            "name": "invalid.deprecated.ruby", 
            "comment": "else if is a common mistake carried over from other languages. it works if you put in a second end, but it\u2019s never what you want."
        }, 
        {
            "match": "(?<!\\.)\\b(BEGIN|begin|case|class|else|elsif|END|end|ensure|for|if|in|module|rescue|then|unless|until|when|while)\\b(?![?!])", 
            "name": "keyword.control.ruby", 
            "comment": "everything being a reserved word, not a value and needing a 'end' is a.."
        }, 
        {
            "match": "(?<!\\.)\\bdo\\b\\s*", 
            "name": "keyword.control.start-block.ruby", 
            "comment": "contextual smart pair support for block parameters"
        }, 
        {
            "match": "(?<=\\{)(\\s+)", 
            "name": "meta.syntax.ruby.start-block", 
            "comment": "contextual smart pair support"
        }, 
        {
            "match": "(?<!\\.)\\b(and|not|or)\\b", 
            "name": "keyword.operator.logical.ruby", 
            "comment": " as above, just doesn't need a 'end' and does a logic operation"
        }, 
        {
            "match": "(?<!\\.)\\b(alias|alias_method|break|next|redo|retry|return|super|undef|yield)\\b(?![?!])|\\bdefined\\?|\\bblock_given\\?", 
            "name": "keyword.control.pseudo-method.ruby", 
            "comment": " just as above but being not a logical operation"
        }, 
        {
            "match": "\\b(nil|true|false)\\b(?![?!])", 
            "name": "constant.language.ruby"
        }, 
        {
            "match": "\\b(__(FILE|LINE)__|self)\\b(?![?!])", 
            "name": "variable.language.ruby"
        }, 
        {
            "match": "\\b(initialize|new|loop|include|extend|raise|attr_reader|attr_writer|attr_accessor|attr|catch|throw|private|module_function|public|protected)\\b(?![?!])", 
            "name": "keyword.other.special-method.ruby", 
            "comment": " everything being a method but having a special function is a.."
        }, 
        {
            "captures": {
                "1": {
                    "name": "keyword.other.special-method.ruby"
                }
            }, 
            "begin": "\\b(require|gem)\\b", 
            "name": "meta.require.ruby", 
            "end": "$|(?=#)", 
            "patterns": [
                {
                    "include": "$self"
                }
            ]
        }, 
        {
            "captures": {
                "1": {
                    "name": "punctuation.definition.variable.ruby"
                }
            }, 
            "match": "(@)[a-zA-Z_]\\w*", 
            "name": "variable.other.readwrite.instance.ruby"
        }, 
        {
            "captures": {
                "1": {
                    "name": "punctuation.definition.variable.ruby"
                }
            }, 
            "match": "(@@)[a-zA-Z_]\\w*", 
            "name": "variable.other.readwrite.class.ruby"
        }, 
        {
            "captures": {
                "1": {
                    "name": "punctuation.definition.variable.ruby"
                }
            }, 
            "match": "(\\$)[a-zA-Z_]\\w*", 
            "name": "variable.other.readwrite.global.ruby"
        }, 
        {
            "captures": {
                "1": {
                    "name": "punctuation.definition.variable.ruby"
                }
            }, 
            "match": "(\\$)(!|@|&|`|'|\\+|\\d+|~|=|/|\\\\|,|;|\\.|<|>|_|\\*|\\$|\\?|:|\"|-[0adFiIlpv])", 
            "name": "variable.other.readwrite.global.pre-defined.ruby"
        }, 
        {
            "beginCaptures": {
                "1": {
                    "name": "variable.other.constant.ruby"
                }
            }, 
            "begin": "\\b(ENV)\\[", 
            "name": "meta.environment-variable.ruby", 
            "end": "\\]", 
            "patterns": [
                {
                    "include": "$self"
                }
            ]
        }, 
        {
            "match": "\\b[A-Z]\\w*(?=((\\.|::)[A-Za-z]|\\[))", 
            "name": "support.class.ruby"
        }, 
        {
            "match": "\\b[A-Z]\\w*\\b", 
            "name": "variable.other.constant.ruby"
        }, 
        {
            "beginCaptures": {
                "3": {
                    "name": "punctuation.definition.parameters.ruby"
                }, 
                "2": {
                    "name": "entity.name.function.ruby"
                }, 
                "1": {
                    "name": "keyword.control.def.ruby"
                }
            }, 
            "endCaptures": {
                "0": {
                    "name": "punctuation.definition.parameters.ruby"
                }
            }, 
            "comment": "the method pattern comes from the symbol pattern, see there for a explaination", 
            "end": "\\)", 
            "patterns": [
                {
                    "include": "$self"
                }
            ], 
            "contentName": "variable.parameter.function.ruby", 
            "begin": "(?x)\n\t\t\t         (?=def\\b)                                                      # an optimization to help Oniguruma fail fast\n\t\t\t         (?<=^|\\s)(def)\\s+                                              # the def keyword\n\t\t\t         ( (?>[a-zA-Z_]\\w*(?>\\.|::))?                                   # a method name prefix\n\t\t\t           (?>[a-zA-Z_]\\w*(?>[?!]|=(?!>))?                              # the method name\n\t\t\t           |===?|>[>=]?|<=>|<[<=]?|[%&`/\\|]|\\*\\*?|=?~|[-+]@?|\\[\\]=?) )  # \u2026or an operator method\n\t\t\t         \\s*(\\()                                                        # the openning parenthesis for arguments\n\t\t\t        ", 
            "name": "meta.function.method.with-arguments.ruby"
        }, 
        {
            "beginCaptures": {
                "2": {
                    "name": "entity.name.function.ruby"
                }, 
                "1": {
                    "name": "keyword.control.def.ruby"
                }
            }, 
            "comment": "same as the previous rule, but without parentheses around the arguments", 
            "end": "$", 
            "patterns": [
                {
                    "include": "$self"
                }
            ], 
            "contentName": "variable.parameter.function.ruby", 
            "begin": "(?x)\n\t\t\t         (?=def\\b)                                                      # an optimization to help Oniguruma fail fast\n\t\t\t         (?<=^|\\s)(def)\\s+                                              # the def keyword\n\t\t\t         ( (?>[a-zA-Z_]\\w*(?>\\.|::))?                                   # a method name prefix\n\t\t\t           (?>[a-zA-Z_]\\w*(?>[?!]|=(?!>))?                              # the method name\n\t\t\t           |===?|>[>=]?|<=>|<[<=]?|[%&`/\\|]|\\*\\*?|=?~|[-+]@?|\\[\\]=?) )  # \u2026or an operator method\n\t\t\t         [ \\t]                                                          # the space separating the arguments\n\t\t\t         (?=[ \\t]*[^\\s#;])                                              # make sure arguments and not a comment follow\n\t\t\t        ", 
            "name": "meta.function.method.with-arguments.ruby"
        }, 
        {
            "captures": {
                "3": {
                    "name": "entity.name.function.ruby"
                }, 
                "1": {
                    "name": "keyword.control.def.ruby"
                }
            }, 
            "match": "(?x)\n\t\t\t         (?=def\\b)                                                           # an optimization to help Oniguruma fail fast\n\t\t\t         (?<=^|\\s)(def)\\b                                                    # the def keyword\n\t\t\t         ( \\s+                                                               # an optional group of whitespace followed by\u2026\n\t\t\t           ( (?>[a-zA-Z_]\\w*(?>\\.|::))?                                      # a method name prefix\n\t\t\t             (?>[a-zA-Z_]\\w*(?>[?!]|=(?!>))?                                 # the method name\n\t\t\t             |===?|>[>=]?|<=>|<[<=]?|[%&`/\\|]|\\*\\*?|=?~|[-+]@?|\\[\\]=?) ) )?  # \u2026or an operator method\n\t\t\t        ", 
            "name": "meta.function.method.without-arguments.ruby", 
            "comment": " the optional name is just to catch the def also without a method-name"
        }, 
        {
            "match": "\\b(0[xX]\\h(?>_?\\h)*|\\d(?>_?\\d)*(\\.(?![^[:space:][:digit:]])(?>_?\\d)*)?([eE][-+]?\\d(?>_?\\d)*)?|0[bB][01]+)\\b", 
            "name": "constant.numeric.ruby"
        }, 
        {
            "captures": {
                "0": {
                    "name": "punctuation.definition.constant.ruby"
                }
            }, 
            "begin": ":'", 
            "name": "constant.other.symbol.single-quoted.ruby", 
            "end": "'", 
            "patterns": [
                {
                    "match": "\\\\['\\\\]", 
                    "name": "constant.character.escape.ruby"
                }
            ]
        }, 
        {
            "captures": {
                "0": {
                    "name": "punctuation.definition.constant.ruby"
                }
            }, 
            "begin": ":\"", 
            "name": "constant.other.symbol.double-quoted.ruby", 
            "end": "\"", 
            "patterns": [
                {
                    "include": "#interpolated_ruby"
                }, 
                {
                    "include": "#escaped_char"
                }
            ]
        }, 
        {
            "match": "/=", 
            "name": "keyword.operator.assignment.augmented.ruby", 
            "comment": "Needs higher precidence than regular expressions."
        }, 
        {
            "beginCaptures": {
                "0": {
                    "name": "punctuation.definition.string.begin.ruby"
                }
            }, 
            "comment": "single quoted string (does not allow interpolation)", 
            "end": "'", 
            "patterns": [
                {
                    "match": "\\\\'|\\\\\\\\", 
                    "name": "constant.character.escape.ruby"
                }
            ], 
            "endCaptures": {
                "0": {
                    "name": "punctuation.definition.string.end.ruby"
                }
            }, 
            "begin": "'", 
            "name": "string.quoted.single.ruby"
        }, 
        {
            "beginCaptures": {
                "0": {
                    "name": "punctuation.definition.string.begin.ruby"
                }
            }, 
            "comment": "double quoted string (allows for interpolation)", 
            "end": "\"", 
            "patterns": [
                {
                    "include": "#interpolated_ruby"
                }, 
                {
                    "include": "#escaped_char"
                }
            ], 
            "endCaptures": {
                "0": {
                    "name": "punctuation.definition.string.end.ruby"
                }
            }, 
            "begin": "\"", 
            "name": "string.quoted.double.ruby"
        }, 
        {
            "beginCaptures": {
                "0": {
                    "name": "punctuation.definition.string.begin.ruby"
                }
            }, 
            "comment": "execute string (allows for interpolation)", 
            "end": "`", 
            "patterns": [
                {
                    "include": "#interpolated_ruby"
                }, 
                {
                    "include": "#escaped_char"
                }
            ], 
            "endCaptures": {
                "0": {
                    "name": "punctuation.definition.string.end.ruby"
                }
            }, 
            "begin": "`", 
            "name": "string.interpolated.ruby"
        }, 
        {
            "beginCaptures": {
                "0": {
                    "name": "punctuation.definition.string.begin.ruby"
                }
            }, 
            "comment": "execute string (allow for interpolation)", 
            "end": "\\}", 
            "patterns": [
                {
                    "include": "#interpolated_ruby"
                }, 
                {
                    "include": "#escaped_char"
                }, 
                {
                    "include": "#nest_curly_i"
                }
            ], 
            "endCaptures": {
                "0": {
                    "name": "punctuation.definition.string.end.ruby"
                }
            }, 
            "begin": "%x\\{", 
            "name": "string.interpolated.ruby"
        }, 
        {
            "beginCaptures": {
                "0": {
                    "name": "punctuation.definition.string.begin.ruby"
                }
            }, 
            "comment": "execute string (allow for interpolation)", 
            "end": "\\]", 
            "patterns": [
                {
                    "include": "#interpolated_ruby"
                }, 
                {
                    "include": "#escaped_char"
                }, 
                {
                    "include": "#nest_brackets_i"
                }
            ], 
            "endCaptures": {
                "0": {
                    "name": "punctuation.definition.string.end.ruby"
                }
            }, 
            "begin": "%x\\[", 
            "name": "string.interpolated.ruby"
        }, 
        {
            "beginCaptures": {
                "0": {
                    "name": "punctuation.definition.string.begin.ruby"
                }
            }, 
            "comment": "execute string (allow for interpolation)", 
            "end": "\\>", 
            "patterns": [
                {
                    "include": "#interpolated_ruby"
                }, 
                {
                    "include": "#escaped_char"
                }, 
                {
                    "include": "#nest_ltgt_i"
                }
            ], 
            "endCaptures": {
                "0": {
                    "name": "punctuation.definition.string.end.ruby"
                }
            }, 
            "begin": "%x\\<", 
            "name": "string.interpolated.ruby"
        }, 
        {
            "beginCaptures": {
                "0": {
                    "name": "punctuation.definition.string.begin.ruby"
                }
            }, 
            "comment": "execute string (allow for interpolation)", 
            "end": "\\)", 
            "patterns": [
                {
                    "include": "#interpolated_ruby"
                }, 
                {
                    "include": "#escaped_char"
                }, 
                {
                    "include": "#nest_parens_i"
                }
            ], 
            "endCaptures": {
                "0": {
                    "name": "punctuation.definition.string.end.ruby"
                }
            }, 
            "begin": "%x\\(", 
            "name": "string.interpolated.ruby"
        }, 
        {
            "beginCaptures": {
                "0": {
                    "name": "punctuation.definition.string.begin.ruby"
                }
            }, 
            "comment": "execute string (allow for interpolation)", 
            "end": "\\1", 
            "patterns": [
                {
                    "include": "#interpolated_ruby"
                }, 
                {
                    "include": "#escaped_char"
                }
            ], 
            "endCaptures": {
                "0": {
                    "name": "punctuation.definition.string.end.ruby"
                }
            }, 
            "begin": "%x([^\\w])", 
            "name": "string.interpolated.ruby"
        }, 
        {
            "captures": {
                "2": {
                    "name": "punctuation.definition.string.ruby"
                }, 
                "1": {
                    "name": "string.regexp.classic.ruby"
                }
            }, 
            "comment": "regular expressions (normal)\n\t\t\twe only start a regexp if the character before it (excluding whitespace)\n\t\t\tis what we think is before a regexp\n\t\t\t", 
            "end": "((/[eimnosux]*))", 
            "patterns": [
                {
                    "include": "#regex_sub"
                }
            ], 
            "contentName": "string.regexp.classic.ruby", 
            "begin": "(?x)\n\t\t\t   (?:\n\t\t\t     ^                      # beginning of line\n\t\t\t   | (?<=                   # or look-behind on:\n\t\t\t       [=>~(?:\\[,|&;]\n\t\t\t     | [\\s;]if\\s\t\t\t# keywords\n\t\t\t     | [\\s;]elsif\\s\n\t\t\t     | [\\s;]while\\s\n\t\t\t     | [\\s;]unless\\s\n\t\t\t     | [\\s;]when\\s\n\t\t\t     | [\\s;]assert_match\\s\n\t\t\t     | [\\s;]or\\s\t\t\t# boolean opperators\n\t\t\t     | [\\s;]and\\s\n\t\t\t     | [\\s;]not\\s\n\t\t\t     | [\\s.]index\\s\t\t\t# methods\n\t\t\t     | [\\s.]scan\\s\n\t\t\t     | [\\s.]sub\\s\n\t\t\t     | [\\s.]sub!\\s\n\t\t\t     | [\\s.]gsub\\s\n\t\t\t     | [\\s.]gsub!\\s\n\t\t\t     | [\\s.]match\\s\n\t\t\t     )\n\t\t\t   | (?<=                  # or a look-behind with line anchor:\n\t\t\t        ^when\\s            # duplication necessary due to limits of regex\n\t\t\t      | ^if\\s\n\t\t\t      | ^elsif\\s\n\t\t\t      | ^while\\s\n\t\t\t      | ^unless\\s\n\t\t\t      )\n\t\t\t   )\n\t\t\t   \\s*((/))(?![*+{}?])\n\t\t\t"
        }, 
        {
            "beginCaptures": {
                "0": {
                    "name": "punctuation.definition.string.begin.ruby"
                }
            }, 
            "comment": "regular expressions (literal)", 
            "end": "\\}[eimnosux]*", 
            "patterns": [
                {
                    "include": "#regex_sub"
                }, 
                {
                    "include": "#nest_curly_r"
                }
            ], 
            "endCaptures": {
                "0": {
                    "name": "punctuation.definition.string.end.ruby"
                }
            }, 
            "begin": "%r\\{", 
            "name": "string.regexp.mod-r.ruby"
        }, 
        {
            "beginCaptures": {
                "0": {
                    "name": "punctuation.definition.string.begin.ruby"
                }
            }, 
            "comment": "regular expressions (literal)", 
            "end": "\\][eimnosux]*", 
            "patterns": [
                {
                    "include": "#regex_sub"
                }, 
                {
                    "include": "#nest_brackets_r"
                }
            ], 
            "endCaptures": {
                "0": {
                    "name": "punctuation.definition.string.end.ruby"
                }
            }, 
            "begin": "%r\\[", 
            "name": "string.regexp.mod-r.ruby"
        }, 
        {
            "beginCaptures": {
                "0": {
                    "name": "punctuation.definition.string.begin.ruby"
                }
            }, 
            "comment": "regular expressions (literal)", 
            "end": "\\)[eimnosux]*", 
            "patterns": [
                {
                    "include": "#regex_sub"
                }, 
                {
                    "include": "#nest_parens_r"
                }
            ], 
            "endCaptures": {
                "0": {
                    "name": "punctuation.definition.string.end.ruby"
                }
            }, 
            "begin": "%r\\(", 
            "name": "string.regexp.mod-r.ruby"
        }, 
        {
            "beginCaptures": {
                "0": {
                    "name": "punctuation.definition.string.begin.ruby"
                }
            }, 
            "comment": "regular expressions (literal)", 
            "end": "\\>[eimnosux]*", 
            "patterns": [
                {
                    "include": "#regex_sub"
                }, 
                {
                    "include": "#nest_ltgt_r"
                }
            ], 
            "endCaptures": {
                "0": {
                    "name": "punctuation.definition.string.end.ruby"
                }
            }, 
            "begin": "%r\\<", 
            "name": "string.regexp.mod-r.ruby"
        }, 
        {
            "beginCaptures": {
                "0": {
                    "name": "punctuation.definition.string.begin.ruby"
                }
            }, 
            "comment": "regular expressions (literal)", 
            "end": "\\1[eimnosux]*", 
            "patterns": [
                {
                    "include": "#regex_sub"
                }
            ], 
            "endCaptures": {
                "0": {
                    "name": "punctuation.definition.string.end.ruby"
                }
            }, 
            "begin": "%r([^\\w])", 
            "name": "string.regexp.mod-r.ruby"
        }, 
        {
            "beginCaptures": {
                "0": {
                    "name": "punctuation.definition.string.begin.ruby"
                }
            }, 
            "comment": "literal capable of interpolation ()", 
            "end": "\\)", 
            "patterns": [
                {
                    "include": "#interpolated_ruby"
                }, 
                {
                    "include": "#escaped_char"
                }, 
                {
                    "include": "#nest_parens_i"
                }
            ], 
            "endCaptures": {
                "0": {
                    "name": "punctuation.definition.string.end.ruby"
                }
            }, 
            "begin": "%[QWSR]?\\(", 
            "name": "string.quoted.other.literal.upper.ruby"
        }, 
        {
            "beginCaptures": {
                "0": {
                    "name": "punctuation.definition.string.begin.ruby"
                }
            }, 
            "comment": "literal capable of interpolation []", 
            "end": "\\]", 
            "patterns": [
                {
                    "include": "#interpolated_ruby"
                }, 
                {
                    "include": "#escaped_char"
                }, 
                {
                    "include": "#nest_brackets_i"
                }
            ], 
            "endCaptures": {
                "0": {
                    "name": "punctuation.definition.string.end.ruby"
                }
            }, 
            "begin": "%[QWSR]?\\[", 
            "name": "string.quoted.other.literal.upper.ruby"
        }, 
        {
            "beginCaptures": {
                "0": {
                    "name": "punctuation.definition.string.begin.ruby"
                }
            }, 
            "comment": "literal capable of interpolation <>", 
            "end": "\\>", 
            "patterns": [
                {
                    "include": "#interpolated_ruby"
                }, 
                {
                    "include": "#escaped_char"
                }, 
                {
                    "include": "#nest_ltgt_i"
                }
            ], 
            "endCaptures": {
                "0": {
                    "name": "punctuation.definition.string.end.ruby"
                }
            }, 
            "begin": "%[QWSR]?\\<", 
            "name": "string.quoted.other.literal.upper.ruby"
        }, 
        {
            "beginCaptures": {
                "0": {
                    "name": "punctuation.definition.string.begin.ruby"
                }
            }, 
            "comment": "literal capable of interpolation -- {}", 
            "end": "\\}", 
            "patterns": [
                {
                    "include": "#interpolated_ruby"
                }, 
                {
                    "include": "#escaped_char"
                }, 
                {
                    "include": "#nest_curly_i"
                }
            ], 
            "endCaptures": {
                "0": {
                    "name": "punctuation.definition.string.end.ruby"
                }
            }, 
            "begin": "%[QWSR]?\\{", 
            "name": "string.quoted.double.ruby.mod"
        }, 
        {
            "beginCaptures": {
                "0": {
                    "name": "punctuation.definition.string.begin.ruby"
                }
            }, 
            "comment": "literal capable of interpolation -- wildcard", 
            "end": "\\1", 
            "patterns": [
                {
                    "include": "#interpolated_ruby"
                }, 
                {
                    "include": "#escaped_char"
                }
            ], 
            "endCaptures": {
                "0": {
                    "name": "punctuation.definition.string.end.ruby"
                }
            }, 
            "begin": "%[QWSR]([^\\w])", 
            "name": "string.quoted.other.literal.upper.ruby"
        }, 
        {
            "beginCaptures": {
                "0": {
                    "name": "punctuation.definition.string.begin.ruby"
                }
            }, 
            "comment": "literal capable of interpolation -- wildcard", 
            "end": "\\1", 
            "patterns": [
                {
                    "include": "#interpolated_ruby"
                }, 
                {
                    "include": "#escaped_char"
                }
            ], 
            "endCaptures": {
                "0": {
                    "name": "punctuation.definition.string.end.ruby"
                }
            }, 
            "begin": "%([^\\w\\s=])", 
            "name": "string.quoted.other.literal.other.ruby"
        }, 
        {
            "beginCaptures": {
                "0": {
                    "name": "punctuation.definition.string.begin.ruby"
                }
            }, 
            "comment": "literal incapable of interpolation -- ()", 
            "end": "\\)", 
            "patterns": [
                {
                    "match": "\\\\\\)|\\\\\\\\", 
                    "name": "constant.character.escape.ruby"
                }, 
                {
                    "include": "#nest_parens"
                }
            ], 
            "endCaptures": {
                "0": {
                    "name": "punctuation.definition.string.end.ruby"
                }
            }, 
            "begin": "%[qws]\\(", 
            "name": "string.quoted.other.literal.lower.ruby"
        }, 
        {
            "beginCaptures": {
                "0": {
                    "name": "punctuation.definition.string.begin.ruby"
                }
            }, 
            "comment": "literal incapable of interpolation -- <>", 
            "end": "\\>", 
            "patterns": [
                {
                    "match": "\\\\\\>|\\\\\\\\", 
                    "name": "constant.character.escape.ruby"
                }, 
                {
                    "include": "#nest_ltgt"
                }
            ], 
            "endCaptures": {
                "0": {
                    "name": "punctuation.definition.string.end.ruby"
                }
            }, 
            "begin": "%[qws]\\<", 
            "name": "string.quoted.other.literal.lower.ruby"
        }, 
        {
            "beginCaptures": {
                "0": {
                    "name": "punctuation.definition.string.begin.ruby"
                }
            }, 
            "comment": "literal incapable of interpolation -- []", 
            "end": "\\]", 
            "patterns": [
                {
                    "match": "\\\\\\]|\\\\\\\\", 
                    "name": "constant.character.escape.ruby"
                }, 
                {
                    "include": "#nest_brackets"
                }
            ], 
            "endCaptures": {
                "0": {
                    "name": "punctuation.definition.string.end.ruby"
                }
            }, 
            "begin": "%[qws]\\[", 
            "name": "string.quoted.other.literal.lower.ruby"
        }, 
        {
            "beginCaptures": {
                "0": {
                    "name": "punctuation.definition.string.begin.ruby"
                }
            }, 
            "comment": "literal incapable of interpolation -- {}", 
            "end": "\\}", 
            "patterns": [
                {
                    "match": "\\\\\\}|\\\\\\\\", 
                    "name": "constant.character.escape.ruby"
                }, 
                {
                    "include": "#nest_curly"
                }
            ], 
            "endCaptures": {
                "0": {
                    "name": "punctuation.definition.string.end.ruby"
                }
            }, 
            "begin": "%[qws]\\{", 
            "name": "string.quoted.other.literal.lower.ruby"
        }, 
        {
            "beginCaptures": {
                "0": {
                    "name": "punctuation.definition.string.begin.ruby"
                }
            }, 
            "comment": "literal incapable of interpolation -- wildcard", 
            "end": "\\1", 
            "patterns": [
                {
                    "match": "\\\\.", 
                    "comment": "Cant be named because its not neccesarily an escape."
                }
            ], 
            "endCaptures": {
                "0": {
                    "name": "punctuation.definition.string.end.ruby"
                }
            }, 
            "begin": "%[qws]([^\\w])", 
            "name": "string.quoted.other.literal.lower.ruby"
        }, 
        {
            "captures": {
                "1": {
                    "name": "punctuation.definition.constant.ruby"
                }
            }, 
            "match": "(?<!:)(:)(?>[a-zA-Z_]\\w*(?>[?!]|=(?![>=]))?|===?|>[>=]?|<[<=]?|<=>|[%&`/\\|]|\\*\\*?|=?~|[-+]@?|\\[\\]=?|@@?[a-zA-Z_]\\w*)", 
            "name": "constant.other.symbol.ruby", 
            "comment": "symbols"
        }, 
        {
            "captures": {
                "1": {
                    "name": "punctuation.definition.constant.ruby"
                }
            }, 
            "match": "(?>[a-zA-Z_]\\w*(?>[?!])?)(:)(?!:)", 
            "name": "constant.other.symbol.ruby.19syntax", 
            "comment": "symbols"
        }, 
        {
            "captures": {
                "0": {
                    "name": "punctuation.definition.comment.ruby"
                }
            }, 
            "begin": "^=begin", 
            "end": "^=end", 
            "comment": "multiline comments", 
            "name": "comment.block.documentation.ruby"
        }, 
        {
            "captures": {
                "1": {
                    "name": "punctuation.definition.comment.ruby"
                }
            }, 
            "match": "(?:^[ \\t]+)?(#).*$\\n?", 
            "name": "comment.line.number-sign.ruby"
        }, 
        {
            "match": "(?<!\\w)\\?(\\\\(x\\h{1,2}(?!\\h)\\b|0[0-7]{0,2}(?![0-7])\\b|[^x0MC])|(\\\\[MC]-)+\\w|[^\\s\\\\])", 
            "name": "constant.numeric.ruby", 
            "comment": "\n\t\t\tmatches questionmark-letters.\n\n\t\t\texamples (1st alternation = hex):\n\t\t\t?\\x1     ?\\x61\n\n\t\t\texamples (2nd alternation = octal):\n\t\t\t?\\0      ?\\07     ?\\017\n\n\t\t\texamples (3rd alternation = escaped):\n\t\t\t?\\n      ?\\b\n\n\t\t\texamples (4th alternation = meta-ctrl):\n\t\t\t?\\C-a    ?\\M-a    ?\\C-\\M-\\C-\\M-a\n\n\t\t\texamples (4th alternation = normal):\n\t\t\t?a       ?A       ?0\n\t\t\t?*       ?\"       ?(\n\t\t\t?.       ?#\n\n\n\t\t\tthe negative lookbehind prevents against matching\n\t\t\tp(42.tainted?)\n\t\t\t"
        }, 
        {
            "captures": {
                "0": {
                    "name": "string.unquoted.program-block.ruby"
                }
            }, 
            "comment": "__END__ marker", 
            "end": "(?=not)impossible", 
            "patterns": [
                {
                    "patterns": [
                        {
                            "include": "text.html.basic"
                        }
                    ], 
                    "begin": "(?=<?xml|<(?i:html\\b)|!DOCTYPE (?i:html\\b))", 
                    "name": "text.html.embedded.ruby", 
                    "end": "(?=not)impossible"
                }
            ], 
            "contentName": "text.plain", 
            "begin": "^__END__\\n"
        }, 
        {
            "beginCaptures": {
                "0": {
                    "name": "punctuation.definition.string.begin.ruby"
                }
            }, 
            "endCaptures": {
                "0": {
                    "name": "punctuation.definition.string.end.ruby"
                }
            }, 
            "comment": "heredoc with embedded HTML and indented terminator", 
            "end": "\\s*\\2$", 
            "patterns": [
                {
                    "include": "#heredoc"
                }, 
                {
                    "include": "text.html.basic"
                }, 
                {
                    "include": "#interpolated_ruby"
                }, 
                {
                    "include": "#escaped_char"
                }
            ], 
            "contentName": "text.html.embedded.ruby", 
            "begin": "(?><<-(\"?)((?:[_\\w]+_|)HTML)\\b\\1)", 
            "name": "string.unquoted.embedded.html.ruby"
        }, 
        {
            "beginCaptures": {
                "0": {
                    "name": "punctuation.definition.string.begin.ruby"
                }
            }, 
            "endCaptures": {
                "0": {
                    "name": "punctuation.definition.string.end.ruby"
                }
            }, 
            "comment": "heredoc with embedded SQL and indented terminator", 
            "end": "\\s*\\2$", 
            "patterns": [
                {
                    "include": "#heredoc"
                }, 
                {
                    "include": "source.sql"
                }, 
                {
                    "include": "#interpolated_ruby"
                }, 
                {
                    "include": "#escaped_char"
                }
            ], 
            "contentName": "text.sql.embedded.ruby", 
            "begin": "(?><<-(\"?)((?:[_\\w]+_|)SQL)\\b\\1)", 
            "name": "string.unquoted.embedded.sql.ruby"
        }, 
        {
            "beginCaptures": {
                "0": {
                    "name": "punctuation.definition.string.begin.ruby"
                }
            }, 
            "endCaptures": {
                "0": {
                    "name": "punctuation.definition.string.end.ruby"
                }
            }, 
            "comment": "heredoc with embedded css and intented terminator", 
            "end": "\\s*\\2$", 
            "patterns": [
                {
                    "include": "#heredoc"
                }, 
                {
                    "include": "source.css"
                }, 
                {
                    "include": "#interpolated_ruby"
                }, 
                {
                    "include": "#escaped_char"
                }
            ], 
            "contentName": "text.css.embedded.ruby", 
            "begin": "(?><<-(\"?)((?:[_\\w]+_|)CSS)\\b\\1)", 
            "name": "string.unquoted.embedded.css.ruby"
        }, 
        {
            "beginCaptures": {
                "0": {
                    "name": "punctuation.definition.string.begin.ruby"
                }
            }, 
            "endCaptures": {
                "0": {
                    "name": "punctuation.definition.string.end.ruby"
                }
            }, 
            "comment": "heredoc with embedded c++ and intented terminator", 
            "end": "\\s*\\2$", 
            "patterns": [
                {
                    "include": "#heredoc"
                }, 
                {
                    "include": "source.c++"
                }, 
                {
                    "include": "#interpolated_ruby"
                }, 
                {
                    "include": "#escaped_char"
                }
            ], 
            "contentName": "text.c++.embedded.ruby", 
            "begin": "(?><<-(\"?)((?:[_\\w]+_|)CPP)\\b\\1)", 
            "name": "string.unquoted.embedded.cplusplus.ruby"
        }, 
        {
            "beginCaptures": {
                "0": {
                    "name": "punctuation.definition.string.begin.ruby"
                }
            }, 
            "endCaptures": {
                "0": {
                    "name": "punctuation.definition.string.end.ruby"
                }
            }, 
            "comment": "heredoc with embedded c++ and intented terminator", 
            "end": "\\s*\\2$", 
            "patterns": [
                {
                    "include": "#heredoc"
                }, 
                {
                    "include": "source.c"
                }, 
                {
                    "include": "#interpolated_ruby"
                }, 
                {
                    "include": "#escaped_char"
                }
            ], 
            "contentName": "text.c.embedded.ruby", 
            "begin": "(?><<-(\"?)((?:[_\\w]+_|)C)\\b\\1)", 
            "name": "string.unquoted.embedded.c.ruby"
        }, 
        {
            "beginCaptures": {
                "0": {
                    "name": "punctuation.definition.string.begin.ruby"
                }
            }, 
            "endCaptures": {
                "0": {
                    "name": "punctuation.definition.string.end.ruby"
                }
            }, 
            "comment": "heredoc with embedded javascript and intented terminator", 
            "end": "\\s*\\2$", 
            "patterns": [
                {
                    "include": "#heredoc"
                }, 
                {
                    "include": "source.js"
                }, 
                {
                    "include": "#interpolated_ruby"
                }, 
                {
                    "include": "#escaped_char"
                }
            ], 
            "contentName": "text.js.embedded.ruby", 
            "begin": "(?><<-(\"?)((?:[_\\w]+_|)(?:JS|JAVASCRIPT))\\b\\1)", 
            "name": "string.unquoted.embedded.js.ruby"
        }, 
        {
            "beginCaptures": {
                "0": {
                    "name": "punctuation.definition.string.begin.ruby"
                }
            }, 
            "endCaptures": {
                "0": {
                    "name": "punctuation.definition.string.end.ruby"
                }
            }, 
            "comment": "heredoc with embedded javascript and intented terminator", 
            "end": "\\s*\\2$", 
            "patterns": [
                {
                    "include": "#heredoc"
                }, 
                {
                    "include": "source.js.jquery"
                }, 
                {
                    "include": "#interpolated_ruby"
                }, 
                {
                    "include": "#escaped_char"
                }
            ], 
            "contentName": "text.js.jquery.embedded.ruby", 
            "begin": "(?><<-(\"?)((?:[_\\w]+_|)JQUERY)\\b\\1)", 
            "name": "string.unquoted.embedded.js.jquery.ruby"
        }, 
        {
            "beginCaptures": {
                "0": {
                    "name": "punctuation.definition.string.begin.ruby"
                }
            }, 
            "endCaptures": {
                "0": {
                    "name": "punctuation.definition.string.end.ruby"
                }
            }, 
            "comment": "heredoc with embedded shell and intented terminator", 
            "end": "\\s*\\2$", 
            "patterns": [
                {
                    "include": "#heredoc"
                }, 
                {
                    "include": "source.shell"
                }, 
                {
                    "include": "#interpolated_ruby"
                }, 
                {
                    "include": "#escaped_char"
                }
            ], 
            "contentName": "text.shell.embedded.ruby", 
            "begin": "(?><<-(\"?)((?:[_\\w]+_|)(?:SH|SHELL))\\b\\1)", 
            "name": "string.unquoted.embedded.shell.ruby"
        }, 
        {
            "beginCaptures": {
                "0": {
                    "name": "punctuation.definition.string.begin.ruby"
                }
            }, 
            "endCaptures": {
                "0": {
                    "name": "punctuation.definition.string.end.ruby"
                }
            }, 
            "comment": "heredoc with embedded ruby and intented terminator", 
            "end": "\\s*\\2$", 
            "patterns": [
                {
                    "include": "#heredoc"
                }, 
                {
                    "include": "source.ruby"
                }, 
                {
                    "include": "#interpolated_ruby"
                }, 
                {
                    "include": "#escaped_char"
                }
            ], 
            "contentName": "text.ruby.embedded.ruby", 
            "begin": "(?><<-(\"?)((?:[_\\w]+_|)RUBY)\\b\\1)", 
            "name": "string.unquoted.embedded.ruby.ruby"
        }, 
        {
            "beginCaptures": {
                "0": {
                    "name": "punctuation.definition.string.begin.ruby"
                }
            }, 
            "end": "^\\1$", 
            "patterns": [
                {
                    "include": "#heredoc"
                }, 
                {
                    "include": "#interpolated_ruby"
                }, 
                {
                    "include": "#escaped_char"
                }
            ], 
            "endCaptures": {
                "0": {
                    "name": "punctuation.definition.string.end.ruby"
                }
            }, 
            "begin": "(?>\\=\\s*<<(\\w+))", 
            "name": "string.unquoted.heredoc.ruby"
        }, 
        {
            "beginCaptures": {
                "0": {
                    "name": "punctuation.definition.string.begin.ruby"
                }
            }, 
            "comment": "heredoc with indented terminator", 
            "end": "\\s*\\1$", 
            "patterns": [
                {
                    "include": "#heredoc"
                }, 
                {
                    "include": "#interpolated_ruby"
                }, 
                {
                    "include": "#escaped_char"
                }
            ], 
            "endCaptures": {
                "0": {
                    "name": "punctuation.definition.string.end.ruby"
                }
            }, 
            "begin": "(?><<-(\\w+))", 
            "name": "string.unquoted.heredoc.ruby"
        }, 
        {
            "captures": {
                "1": {
                    "name": "punctuation.separator.variable.ruby"
                }
            }, 
            "begin": "(?<=\\{|do|\\{\\s|do\\s)(\\|)", 
            "end": "(\\|)", 
            "patterns": [
                {
                    "match": "[_a-zA-Z][_a-zA-Z0-9]*", 
                    "name": "variable.other.block.ruby"
                }, 
                {
                    "match": ",", 
                    "name": "punctuation.separator.variable.ruby"
                }
            ]
        }, 
        {
            "match": "=>", 
            "name": "punctuation.separator.key-value"
        }, 
        {
            "match": "<<=|%=|&=|\\*=|\\*\\*=|\\+=|\\-=|\\^=|\\|{1,2}=|<<", 
            "name": "keyword.operator.assignment.augmented.ruby"
        }, 
        {
            "match": "<=>|<(?!<|=)|>(?!<|=|>)|<=|>=|===|==|=~|!=|!~|(?<=[ \\t])\\?", 
            "name": "keyword.operator.comparison.ruby"
        }, 
        {
            "match": "(?<=[ \\t])!+|\\bnot\\b|&&|\\band\\b|\\|\\||\\bor\\b|\\^", 
            "name": "keyword.operator.logical.ruby"
        }, 
        {
            "match": "(%|&|\\*\\*|\\*|\\+|\\-|/)", 
            "name": "keyword.operator.arithmetic.ruby"
        }, 
        {
            "match": "=", 
            "name": "keyword.operator.assignment.ruby"
        }, 
        {
            "match": "\\||~|>>", 
            "name": "keyword.operator.other.ruby"
        }, 
        {
            "match": ":", 
            "name": "punctuation.separator.other.ruby"
        }, 
        {
            "match": "\\;", 
            "name": "punctuation.separator.statement.ruby"
        }, 
        {
            "match": ",", 
            "name": "punctuation.separator.object.ruby"
        }, 
        {
            "match": "\\.|::", 
            "name": "punctuation.separator.method.ruby"
        }, 
        {
            "match": "\\{|\\}", 
            "name": "punctuation.section.scope.ruby"
        }, 
        {
            "match": "\\[|\\]", 
            "name": "punctuation.section.array.ruby"
        }, 
        {
            "match": "\\(|\\)", 
            "name": "punctuation.section.function.ruby"
        }
    ], 
    "fileTypes": [
        "rb", 
        "rbx", 
        "rjs", 
        "Rakefile", 
        "rake", 
        "cgi", 
        "fcgi", 
        "gemspec", 
        "irbrc", 
        "capfile", 
        "Gemfile"
    ], 
    "repository": {
        "nest_curly_i": {
            "captures": {
                "0": {
                    "name": "punctuation.section.scope.ruby"
                }
            }, 
            "begin": "\\{", 
            "end": "\\}", 
            "patterns": [
                {
                    "include": "#interpolated_ruby"
                }, 
                {
                    "include": "#escaped_char"
                }, 
                {
                    "include": "#nest_curly_i"
                }
            ]
        }, 
        "heredoc": {
            "patterns": [
                {
                    "include": "$self"
                }
            ], 
            "begin": "^<<-?\\w+", 
            "end": "$"
        }, 
        "nest_parens_r": {
            "captures": {
                "0": {
                    "name": "punctuation.section.scope.ruby"
                }
            }, 
            "begin": "\\(", 
            "end": "\\)", 
            "patterns": [
                {
                    "include": "#regex_sub"
                }, 
                {
                    "include": "#nest_parens_r"
                }
            ]
        }, 
        "nest_parens": {
            "captures": {
                "0": {
                    "name": "punctuation.section.scope.ruby"
                }
            }, 
            "begin": "\\(", 
            "end": "\\)", 
            "patterns": [
                {
                    "include": "#nest_parens"
                }
            ]
        }, 
        "nest_brackets": {
            "captures": {
                "0": {
                    "name": "punctuation.section.scope.ruby"
                }
            }, 
            "begin": "\\[", 
            "end": "\\]", 
            "patterns": [
                {
                    "include": "#nest_brackets"
                }
            ]
        }, 
        "nest_ltgt_i": {
            "captures": {
                "0": {
                    "name": "punctuation.section.scope.ruby"
                }
            }, 
            "begin": "\\<", 
            "end": "\\>", 
            "patterns": [
                {
                    "include": "#interpolated_ruby"
                }, 
                {
                    "include": "#escaped_char"
                }, 
                {
                    "include": "#nest_ltgt_i"
                }
            ]
        }, 
        "interpolated_ruby": {
            "patterns": [
                {
                    "captures": {
                        "1": {
                            "name": "source.ruby.embedded.source.empty"
                        }, 
                        "0": {
                            "name": "punctuation.section.embedded.ruby"
                        }
                    }, 
                    "match": "#\\{(\\})", 
                    "name": "source.ruby.embedded.source"
                }, 
                {
                    "captures": {
                        "0": {
                            "name": "punctuation.section.embedded.ruby"
                        }
                    }, 
                    "begin": "#\\{", 
                    "name": "source.ruby.embedded.source", 
                    "end": "\\}", 
                    "patterns": [
                        {
                            "include": "#nest_curly_and_self"
                        }, 
                        {
                            "include": "$self"
                        }
                    ]
                }, 
                {
                    "captures": {
                        "1": {
                            "name": "punctuation.definition.variable.ruby"
                        }
                    }, 
                    "match": "(#@)[a-zA-Z_]\\w*", 
                    "name": "variable.other.readwrite.instance.ruby"
                }, 
                {
                    "captures": {
                        "1": {
                            "name": "punctuation.definition.variable.ruby"
                        }
                    }, 
                    "match": "(#@@)[a-zA-Z_]\\w*", 
                    "name": "variable.other.readwrite.class.ruby"
                }, 
                {
                    "captures": {
                        "1": {
                            "name": "punctuation.definition.variable.ruby"
                        }
                    }, 
                    "match": "(#\\$)[a-zA-Z_]\\w*", 
                    "name": "variable.other.readwrite.global.ruby"
                }
            ]
        }, 
        "nest_brackets_r": {
            "captures": {
                "0": {
                    "name": "punctuation.section.scope.ruby"
                }
            }, 
            "begin": "\\[", 
            "end": "\\]", 
            "patterns": [
                {
                    "include": "#regex_sub"
                }, 
                {
                    "include": "#nest_brackets_r"
                }
            ]
        }, 
        "nest_parens_i": {
            "captures": {
                "0": {
                    "name": "punctuation.section.scope.ruby"
                }
            }, 
            "begin": "\\(", 
            "end": "\\)", 
            "patterns": [
                {
                    "include": "#interpolated_ruby"
                }, 
                {
                    "include": "#escaped_char"
                }, 
                {
                    "include": "#nest_parens_i"
                }
            ]
        }, 
        "nest_ltgt": {
            "captures": {
                "0": {
                    "name": "punctuation.section.scope.ruby"
                }
            }, 
            "begin": "\\<", 
            "end": "\\>", 
            "patterns": [
                {
                    "include": "#nest_ltgt"
                }
            ]
        }, 
        "escaped_char": {
            "match": "\\\\(?:[0-7]{1,3}|x[\\da-fA-F]{1,2}|.)", 
            "name": "constant.character.escape.ruby"
        }, 
        "nest_curly_and_self": {
            "patterns": [
                {
                    "captures": {
                        "0": {
                            "name": "punctuation.section.scope.ruby"
                        }
                    }, 
                    "begin": "\\{", 
                    "end": "\\}", 
                    "patterns": [
                        {
                            "include": "#nest_curly_and_self"
                        }
                    ]
                }, 
                {
                    "include": "$self"
                }
            ]
        }, 
        "nest_brackets_i": {
            "captures": {
                "0": {
                    "name": "punctuation.section.scope.ruby"
                }
            }, 
            "begin": "\\[", 
            "end": "\\]", 
            "patterns": [
                {
                    "include": "#interpolated_ruby"
                }, 
                {
                    "include": "#escaped_char"
                }, 
                {
                    "include": "#nest_brackets_i"
                }
            ]
        }, 
        "nest_ltgt_r": {
            "captures": {
                "0": {
                    "name": "punctuation.section.scope.ruby"
                }
            }, 
            "begin": "\\<", 
            "end": "\\>", 
            "patterns": [
                {
                    "include": "#regex_sub"
                }, 
                {
                    "include": "#nest_ltgt_r"
                }
            ]
        }, 
        "nest_curly_r": {
            "captures": {
                "0": {
                    "name": "punctuation.section.scope.ruby"
                }
            }, 
            "begin": "\\{", 
            "end": "\\}", 
            "patterns": [
                {
                    "include": "#regex_sub"
                }, 
                {
                    "include": "#nest_curly_r"
                }
            ]
        }, 
        "nest_curly": {
            "captures": {
                "0": {
                    "name": "punctuation.section.scope.ruby"
                }
            }, 
            "begin": "\\{", 
            "end": "\\}", 
            "patterns": [
                {
                    "include": "#nest_curly"
                }
            ]
        }, 
        "regex_sub": {
            "patterns": [
                {
                    "include": "#interpolated_ruby"
                }, 
                {
                    "include": "#escaped_char"
                }, 
                {
                    "captures": {
                        "3": {
                            "name": "punctuation.definition.arbitrary-repitition.ruby"
                        }, 
                        "1": {
                            "name": "punctuation.definition.arbitrary-repitition.ruby"
                        }
                    }, 
                    "match": "(\\{)\\d+(,\\d+)?(\\})", 
                    "name": "string.regexp.arbitrary-repitition.ruby"
                }, 
                {
                    "captures": {
                        "0": {
                            "name": "punctuation.definition.character-class.ruby"
                        }
                    }, 
                    "begin": "\\[(?:\\^?\\])?", 
                    "name": "string.regexp.character-class.ruby", 
                    "end": "\\]", 
                    "patterns": [
                        {
                            "include": "#escaped_char"
                        }
                    ]
                }, 
                {
                    "captures": {
                        "0": {
                            "name": "punctuation.definition.group.ruby"
                        }
                    }, 
                    "begin": "\\(", 
                    "name": "string.regexp.group.ruby", 
                    "end": "\\)", 
                    "patterns": [
                        {
                            "include": "#regex_sub"
                        }
                    ]
                }, 
                {
                    "captures": {
                        "1": {
                            "name": "punctuation.definition.comment.ruby"
                        }
                    }, 
                    "match": "(?<=^|\\s)(#)\\s[[a-zA-Z0-9,. \\t?!-][^\\x{00}-\\x{7F}]]*$", 
                    "name": "comment.line.number-sign.ruby", 
                    "comment": "We are restrictive in what we allow to go after the comment character to avoid false positives, since the availability of comments depend on regexp flags."
                }
            ]
        }
    }, 
    "comment": "\n\tTODO: unresolved issues\n\n\ttext:\n\t\"p << end\n\tprint me!\n\tend\"\n\tsymptoms:\n\tnot recognized as a heredoc\n\tsolution:\n\tthere is no way to distinguish perfectly between the << operator and the start\n\tof a heredoc. Currently, we require assignment to recognize a heredoc. More\n\trefinement is possible.\n\t\u2022 Heredocs with indented terminators (<<-) are always distinguishable, however.\n\t\u2022 Nested heredocs are not really supportable at present\n\n\ttext:\n\tprint <<-'THERE'\n\tThis is single quoted.\n\tThe above used #{Time.now}\n\tTHERE\n\tsymtoms:\n\tFrom Programming Ruby p306; should be a non-interpolated heredoc.\n\n\ttext:\n\t\"a\\332a\"\n\tsymptoms:\n\t'\\332' is not recognized as slash3.. which should be octal 332.\n\tsolution:\n\tplain regexp.. should be easy.\n\n    text:\n    val?(a):p(b)\n    val?'a':'b'\n    symptoms:\n    ':p' is recognized as a symbol.. its 2 things ':' and 'p'.\n    :'b' has same problem.\n    solution:\n    ternary operator rule, precedence stuff, symbol rule.\n    but also consider 'a.b?(:c)' ??\n", 
    "uuid": "E00B62AC-6B1C-11D9-9B1F-000D93589AF6", 
    "firstLineMatch": "^#!/.*\\bruby", 
    "scopeName": "source.ruby", 
    "foldingStartMarker": "(?x)^\n\t    (\\s*+\n\t        (module|class|def(?!.*\\bend\\s*$)\n\t        |unless|if\n\t        |case\n\t        |begin\n\t        |for|while|until\n\t         |^=begin\n\t        |(  \"(\\\\.|[^\"])*+\"          # eat a double quoted string\n\t         | '(\\\\.|[^'])*+'        # eat a single quoted string\n\t         |   [^#\"']                # eat all but comments and strings\n\t         )*\n\t         (                        \\s   (do|begin|case)\n\t         | (?<!\\$)[-+=&|*/~%^<>~] \\s*+ (if|unless)\n\t         )\n\t        )\\b\n\t        (?! [^;]*+ ; .*? \\bend\\b )\n\t    |(  \"(\\\\.|[^\"])*+\"              # eat a double quoted string\n\t     | '(\\\\.|[^'])*+'            # eat a single quoted string\n\t     |   [^#\"']                    # eat all but comments and strings\n\t     )*\n\t     ( \\{ (?!  [^}]*+ \\} )\n\t     | \\[ (?! [^\\]]*+ \\] )\n\t     )\n\t    ).*$\n\t|   [#] .*? \\(fold\\) \\s*+ $         # Sune\u2019s special marker\n\t", 
    "foldingStopMarker": "(?x)\n\t\t(   (^|;) \\s*+ end   \\s*+ ([#].*)? $\n\t\t|   (^|;) \\s*+ end \\. .* $\n\t\t|   ^     \\s*+ [}\\]] ,? \\s*+ ([#].*)? $\n\t\t|   [#] .*? \\(end\\) \\s*+ $    # Sune\u2019s special marker\n\t\t|   ^=end\n\t\t)", 
    "keyEquivalent": "^~R"
}